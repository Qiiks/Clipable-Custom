{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PTERODACTYL PANEL - PTERODACTYL.IO",
    "meta": {
        "version": "PTDL_v2",
        "update_url": null
    },
    "exported_at": "2025-05-09T00:00:00-04:00",
    "name": "Clipable Auto-Setup",
    "author": "sanve@example.com",
    "description": "A self-hosted video clip sharing platform with automatic setup, including MinIO and MySQL. Optimized for low resource usage (1 CPU, 2-3GB RAM)",
    "features": ["mysql", "minio"],
    "docker_images": {
        "ghcr.io/aperim/nvidia-cuda-ffmpeg:12.2.2-6.1.1-ubuntu22.04-0.3.6": "ghcr.io/aperim/nvidia-cuda-ffmpeg:12.2.2-6.1.1-ubuntu22.04-0.3.6"
    },
    "file_denylist": [],
    "startup": "bash ./start.sh",
    "config": {
        "files": "{}",
        "startup": "{\r\n    \"done\": \"Started Clipable Server\"\r\n}",
        "logs": "{}",
        "stop": "^C"
    },
    "scripts": {
        "installation": {
            "script": "#!\/bin\/ash\r\n\r\n# Clipable Auto-Installation Script\r\napk update && apk add --no-cache \\\r\n    curl \\\r\n    nginx \\\r\n    nodejs \\\r\n    npm \\\r\n    supervisor \\\r\n    git \\\r\n    docker \\\r\n    docker-compose \\\r\n    mysql-client \\\r\n    bash \\\r\n    openssl \\\r\n    shadow \\\r\n    sudo\r\n\r\n# Add current user to docker group\r\naddgroup ${USER} docker || true\r\n\r\n# Create required directories with proper permissions\r\nmkdir -p \/mnt\/server\r\nchown -R ${USER}:${USER} \/mnt\/server\r\n\r\nnpm install -g pnpm\r\n\r\ncd \/mnt\/server\r\n\r\n# Clone the repository\r\ngit clone https://github.com/Qiiks/Clipable-Custom.git .\r\n\r\n# Create docker-compose for services\r\ncat > docker-compose.services.yml <<EOL\r\nversion: '3.8'\r\nservices:\r\n  db:\r\n    image: mysql:8-oracle\r\n    restart: always\r\n    environment:\r\n      MYSQL_ROOT_PASSWORD: clipablerootpass\r\n      MYSQL_DATABASE: clipable\r\n      MYSQL_USER: clipable\r\n      MYSQL_PASSWORD: clipablepass\r\n    ports:\r\n      - \"3306:3306\"\r\n    volumes:\r\n      - mysql_data:\/var\/lib\/mysql\r\n    command: >\r\n      --default-authentication-plugin=mysql_native_password\r\n      --innodb-buffer-pool-size=256M\r\n      --max-connections=50\r\n      --performance-schema=0\r\n      --table-definition-cache=400\r\n      --table-open-cache=256\r\n\r\n  minio:\r\n    image: minio\/minio\r\n    command: server \/data --console-address \":9001\"\r\n    environment:\r\n      MINIO_ROOT_USER: clipableadmin\r\n      MINIO_ROOT_PASSWORD: clipableadmin\r\n      MINIO_CACHE_QUOTA: 512MB\r\n      MINIO_CACHE_AFTER: 1\r\n      MINIO_CACHE_WATERMARK_LOW: 70\r\n      MINIO_CACHE_WATERMARK_HIGH: 90\r\n    ports:\r\n      - \"9000:9000\"\r\n      - \"9001:9001\"\r\n    volumes:\r\n      - minio_data:\/data\r\n\r\nvolumes:\r\n  mysql_data:\r\n  minio_data:\r\nEOL\r\n\r\n# Create startup script\r\ncat > start.sh <<EOL\r\n#!/bin/bash\r\nset -e\r\n\r\n# Start services\r\ndocker-compose -f docker-compose.services.yml up -d\r\n\r\n# Wait for services to be ready\r\necho \"Waiting for MySQL...\"\r\nuntil mysql -h\"127.0.0.1\" -P\"3306\" -uclipable -pclipablepass -e \"SELECT 1\" >/dev/null 2>&1; do\r\n    echo -n \".\"\r\n    sleep 1\r\ndone\r\n\r\necho \"\\nWaiting for MinIO...\"\r\nuntil curl -sf http:\/\/127.0.0.1:9000\/minio\/health\/ready; do\r\n    echo -n \".\"\r\n    sleep 1\r\ndone\r\n\r\n# Create MinIO bucket\r\nmc alias set myminio http:\/\/127.0.0.1:9000 clipableadmin clipableadmin\r\nmc mb myminio\/clipable || true\r\n\r\n# Set environment variables\r\nexport DB_HOST=127.0.0.1\r\nexport DB_PORT=3306\r\nexport DB_NAME=clipable\r\nexport DB_USER=clipable\r\nexport DB_PASS=clipablepass\r\nexport S3_ADDRESS=127.0.0.1:9000\r\nexport S3_ACCESS=clipableadmin\r\nexport S3_SECRET=clipableadmin\r\nexport S3_BUCKET=clipable\r\nexport S3_SECURE=false\r\n\r\n# Set performance optimizations for low resource usage\r\nexport GOMAXPROCS=1\r\nexport NODE_OPTIONS=\"--max-old-space-size=1024\"\r\n\r\n# Build backend with memory optimizations\r\ncd backend\r\nGO111MODULE=on go build -o clipable -ldflags=\"-s -w\" -tags=\"netgo\" -installsuffix netgo\r\n\r\n# Build frontend with reduced worker count\r\ncd ..\/frontend\r\nNODE_ENV=production pnpm install --production\r\nNEXT_TELEMETRY_DISABLED=1 pnpm build\r\n\r\n# Copy configs\r\ncp ..\/nginx.conf \/etc\/nginx\/nginx.conf\r\ncp ..\/supervisord.conf .\/supervisord.conf\r\n\r\n# Start the application\r\nexec supervisord -c .\/supervisord.conf\r\nEOL\r\n\r\nchmod +x start.sh\r\n\r\n# Install mc (MinIO client)\r\nwget https:\/\/dl.min.io\/client\/mc\/release\/linux-amd64\/mc\r\nchmod +x mc\r\nmv mc \/usr\/local\/bin\/\r\n",
            "container": "golang:alpine",
            "entrypoint": "ash"
        }
    },
    "variables": []
}